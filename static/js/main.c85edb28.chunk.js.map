{"version":3,"sources":["web3.js","lottery.js","App.js","registerServiceWorker.js","index.js"],"names":["web3","Web3","window","currentProvider","lottery","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","App","state","manager","players","balance","value","message","onSubmit","_callee","event","accounts","regenerator_default","a","wrap","_context","prev","next","preventDefault","getAccounts","sent","_this","setState","methods","enter","send","from","utils","toWei","stop","onClick","_callee2","_context2","pickWinner","call","getPlayers","getBalance","options","address","this","_this2","react_default","createElement","className","length","fromWei","onChange","target","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c85edb28.chunk.js","sourcesContent":["import Web3 from 'web3';\n\n// use the provider from metamask\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;\n","import web3 from './web3';\n\n// address of the contract that is on etherium rinkeby network\nconst address = '0x3b60163C989FaB569f8d87d3bC7265e1E49C8A7F';\n\nconst abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'manager',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'pickWinner',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'getPlayers',\n    outputs: [{ name: '', type: 'address[]' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'enter',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [{ name: '', type: 'uint256' }],\n    name: 'players',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor'\n  }\n];\n// window to the contract that exists on the block chain\nexport default new web3.eth.Contract(abi, address);\n","import React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\n\nclass App extends Component {\n  state = {\n    manager: '',\n    players: [],\n    balance: '',\n    value: '',\n    message: ''\n  };\n\n  async componentDidMount() {\n    // when using metamask dont have to specify from\n    const manager = await lottery.methods.manager().call();\n    const players = await lottery.methods.getPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n\n    this.setState({ manager, players, balance });\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({ message: 'Waiting on transaction success...' });\n\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.value, 'ether')\n    });\n\n    this.setState({ message: 'You have been entered!' });\n  };\n\n  onClick = async () => {\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({ message: 'Waiting on transaction success...' });\n\n    await lottery.methods.pickWinner().send({\n      from: accounts[0]\n    });\n\n    this.setState({ message: 'A winner has been picked!' });\n  };\n\n  render() {\n    return (\n      <div>\n        <br />\n        <div className=\"ui container\">\n          <h2>Lottery Contract</h2>\n          <br />\n          <p>\n            This is a simple Lottery App built on the Rinkeby Test Ethereum\n            Network. You will need the Metamask browser extension to interact\n            with this app.\n          </p>\n          <br />\n          <p>This contract is managed by {this.state.manager}.</p>\n          <br />\n          <p>\n            There are currently {this.state.players.length} people entered,\n            competing to win {web3.utils.fromWei(this.state.balance, 'ether')}{' '}\n            ether!\n          </p>\n          <hr />\n          <form onSubmit={this.onSubmit}>\n            <h4>Want to try your luck?</h4>\n            <div>\n              <label>Amount of ether to enter</label>\n              <div className=\"ui small icon input\">\n                <input\n                  value={this.state.value}\n                  onChange={event =>\n                    this.setState({ value: event.target.value })\n                  }\n                />\n              </div>\n            </div>\n            <button className=\"ui button\">Enter</button>\n          </form>\n          <hr />\n          <h4>Ready to pick a winner?</h4>\n          <button className=\"ui button\" onClick={this.onClick}>\n            Pick a winner!\n          </button>\n          <hr />\n          <h1>{this.state.message}</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}